{"version":3,"sources":["HxConvertPatch.js","HxBlock.js","HxPatch.js","HxFileLoader.js","ReportViewer.js","App.js","serviceWorker.js","index.js"],"names":["ConvertPatch","patch","convertBlock","block","console","log","convertedBlock","key","hasOwnProperty","convertedPatch","name","data","meta","blocks","tone","dsp0","push","block0","block1","block2","block3","block4","block5","block6","block7","dsp1","Block","rows","startsWith","scope","class","Card","Body","Header","BlockReport","Patch","props","length","i","PatchReport","FileLoader","handleFileRead","e","onUploadCompleted","JSON","parse","stringify","target","result","className","method","action","id","type","multiple","onChange","event","file","files","reader","FileReader","onload","readAsText","ReportViewer","App","useState","patchData","setPatchData","to","exact","path","jsonData","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f2ee2f1.chunk.js","sourcesContent":["\nfunction ConvertPatch(patch) {\n    function convertBlock(block) {\n        console.log(block);\n        let convertedBlock = {};\n        for (let key in block) {\n            if (block.hasOwnProperty(key)) {\n                convertedBlock[key] = block[key];\n            }\n        }\n        return convertedBlock;\n    }\n    console.log(\"Input Patch\");\n    console.log(patch);\n    var convertedPatch = {};\n    convertedPatch.name = patch.data.meta.name;\n    convertedPatch.blocks = [];\n    if (\"block0\" in patch.data.tone.dsp0) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp0.block0));\n    }\n    if (\"block1\" in patch.data.tone.dsp0) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp0.block1));\n    }\n    if (\"block2\" in patch.data.tone.dsp0) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp0.block2));\n    }\n    if (\"block3\" in patch.data.tone.dsp0) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp0.block3));\n    }\n    if (\"block4\" in patch.data.tone.dsp0) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp0.block4));\n    }\n    if (\"block5\" in patch.data.tone.dsp0) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp0.block5));\n    }\n    if (\"block6\" in patch.data.tone.dsp0) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp0.block6));\n    }\n    if (\"block7\" in patch.data.tone.dsp0) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp0.block7));\n    }\n    if (\"block0\" in patch.data.tone.dsp1) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp1.block0));\n    }\n    if (\"block1\" in patch.data.tone.dsp1) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp1.block1));\n    }\n    if (\"block2\" in patch.data.tone.dsp1) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp1.block2));\n    }\n    if (\"block3\" in patch.data.tone.dsp1) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp1.block3));\n    }\n    if (\"block4\" in patch.data.tone.dsp1) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp1.block4));\n    }\n    if (\"block5\" in patch.data.tone.dsp1) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp1.block5));\n    }\n    if (\"block6\" in patch.data.tone.dsp1) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp1.block6));\n    }\n    if (\"block7\" in patch.data.tone.dsp1) {\n        convertedPatch.blocks.push(convertBlock(patch.data.tone.dsp1.block7));\n    }\n    console.log(convertedPatch);\n    return convertedPatch;\n}\n\nexport default ConvertPatch;\n","import React from 'react';\nimport Card from 'react-bootstrap/Card';\n\nexport function Block(block) {\n    let rows = [];\n    for (let key in block) {\n        if (!key.startsWith(\"@\") && block.hasOwnProperty(key)) {\n            rows.push(<tr><th scope=\"row\">{key}</th><td>{block[key]}</td></tr>);\n        }\n    }\n    return (\n        <div class=\"col mb-4\">\n            <Card>\n                <Card.Body>\n                    <Card.Header>{block[\"@model\"]}</Card.Header>\n                    <table class=\"table table-dark\">\n                        <tbody>\n                            {rows}\n                        </tbody>\n                    </table>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n\nexport function BlockReport(block) {\n    let rows = [];\n    for (let key in block) {\n        if (!key.startsWith(\"@\") && block.hasOwnProperty(key)) {\n            rows.push(<tr><th scope=\"row\">{key}</th><td>{block[key]}</td></tr>);\n        }\n    }\n    return (\n        <div class=\"col mb-1\">\n            <Card>\n                <Card.Body>\n                    <Card.Header>{block[\"@model\"]}</Card.Header>\n                    <table class=\"table\">\n                        <tbody>\n                            {rows}\n                        </tbody>\n                    </table>\n                </Card.Body>\n            </Card>\n        </div>\n    );\n}\n","import React from 'react';\nimport {Block, BlockReport} from './HxBlock.js';\nimport CardDeck from 'react-bootstrap/CardDeck';\n\nexport function Patch(props) {\n\n    var blocks = [];\n    if (\"name\" in props.patch) {\n        console.log(props.patch.blocks.length);\n        for (let i = 0; i < props.patch.blocks.length; i++) {\n            blocks.push(Block(props.patch.blocks[i]));\n        }\n        console.log(blocks);\n        return (\n            <div>\n                <h2>{props.patch.name}</h2>\n                <div class=\"row row-cols-1 row-cols-md-3\">\n                    {blocks}\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <h2>No Patch Selected</h2>\n        );\n    }\n}\n\nexport function PatchReport(props) {\n    var blocks = [];\n    if (\"name\" in props.patch) {\n        console.log(props.patch.blocks.length);\n        for (let i = 0; i < props.patch.blocks.length; i++) {\n            blocks.push(BlockReport(props.patch.blocks[i]));\n        }\n        console.log(blocks);\n        return (\n            <div>\n            <h2>{props.patch.name}</h2>\n            <div class=\"row row-cols-1 row-cols-md-1\">\n                {blocks}\n            </div>\n            </div>\n    );\n    } else {\n        return (\n            <h2>No Patch Selected</h2>\n    );\n    }\n}\n","import React from 'react';\n\nfunction FileLoader(props) {\n\n    function onChangeHandler(event) {\n\n        var file = event.target.files[0];\n        var reader = new FileReader();\n        reader.onload = handleFileRead;\n\n        reader.readAsText(file);\n\n    };\n\n    function handleFileRead(e) {\n        props.onUploadCompleted(JSON.parse(JSON.stringify(e.target.result)));\n    };\n\n    return(\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-md-6\">\n                    <form method=\"post\" action=\"#\" id=\"#\">\n                      <div className=\"form-group files\">\n                            <label>Upload Your File </label>\n                            <input type=\"file\" className=\"form-control\" multiple=\"\" onChange={onChangeHandler}/>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default FileLoader;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { PDFViewer, Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\n\nfunction ReportViewer(props)  {\n\n    // Create styles\n        const styles = StyleSheet.create({\n            page: {\n                flexDirection: 'row',\n                backgroundColor: '#E4E4E4'\n            },\n            section: {\n                margin: 10,\n                padding: 10,\n                flexGrow: 1\n            }\n        });\n\n    let blockViews = [];\n    for (let block in props.patch.blocks) {\n        blockViews.push(\n            <View style={{ background: 'red' }}>\n                <Text>{block.name}</Text>\n            </View>\n        );\n    };\n    blockViews = Array.from(blockViews);\n    console.log(\"Block Views\");\n    console.log(typeof blockViews);\n    console.log(blockViews);\n    // Create Document Component\n    function MyDocument() {\n        if (\"name\" in props.patch) {\n            return (\n                <Document>\n                    <Page size=\"A4\" style={styles.page}>\n                        <View>\n                            <Text>{props.patch.name}</Text>\n                        </View>\n                        {blockViews}\n                    </Page>\n                </Document>\n            );\n        } else {\n            return (\n                <Document>\n                </Document>\n            );\n        }\n    }\n    return (\n        <PDFViewer>\n            <MyDocument />\n        </PDFViewer>\n        )\n};\n\nexport default ReportViewer;","import React, { useState } from 'react';\nimport './App.css';\n// import HxFileLoader from './HxFileLoader.js';\nimport ConvertPatch from './HxConvertPatch.js';\nimport { Patch, PatchReport} from './HxPatch.js';\nimport FileLoader from './HxFileLoader.js';\nimport LoadMetaData from './HxMetaDataLoader.js';\nimport ReportViewer from './ReportViewer.js';\nimport Button from 'react-bootstrap/Button'\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\n\nfunction App() {\n    const [patchData, setPatchData] = useState({});\n    const [metaData, setMetaData] = useState({});\n\n  function handleData(data) {\n      var jsonData = JSON.parse(data);\n      setPatchData(ConvertPatch(jsonData));\n\n  }\n\n  function handleReportClick() {\n      window.open(ReportViewer, '_blank');\n  }\n  // LoadMetaData(setPatchData);\n  // console.log(metaData);\n  return (\n    <Router>\n        <div>\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul class=\"navbar-nav mr-auto\">\n                        <li class=\"nav-item active\">\n                            <Link class=\"nav-link\" to=\"/\">Home</Link>\n                        </li>\n                        <li class=\"nav-item\">\n                            <Link class=\"nav-link\" to=\"/loadFile\">Load File</Link>\n                        </li>\n                        <li class=\"nav-item dropdown\">\n                            <Link class=\"nav-link\" to=\"/report\">Report</Link>\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n            <Switch>\n                <Route exact path=\"/\">\n                    <div className=\"App\">\n                        <header className=\"App-header\">\n                            <p>HX Hub</p>\n                        </header>\n                        <body>\n                            <Patch patch={patchData}/>\n                        </body>\n                    </div>\n                </Route>\n                <Route path=\"/loadFile\">\n                    <div className=\"App\">\n                        <header className=\"App-header\">\n                            <p>HX Hub</p>\n                        </header>\n                        <body>\n                            <FileLoader onUploadCompleted={handleData}/>\n                        </body>\n                    </div>\n                </Route>\n                <Route path=\"/report\">\n                    <PatchReport patch={patchData}/>\n                </Route>\n            </Switch>\n        </div>\n    </Router>\n\n);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}